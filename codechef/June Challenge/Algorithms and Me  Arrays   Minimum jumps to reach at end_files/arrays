// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170"},"updated":{"$t":"2014-06-15T11:11:58.181+05:30"},"category":[{"term":"algorithms"},{"term":"binary search tree"},{"term":"Dynamic Programming"},{"term":"arrays"},{"term":"interview question"},{"term":"Operating Systems"},{"term":"stacks"},{"term":"strings"},{"term":"graphs"},{"term":"Heaps"},{"term":"recursion"},{"term":"C"},{"term":"Microsoft interview questions"},{"term":"divide and conquer"},{"term":"linked list"},{"term":"programming"},{"term":"Queue"},{"term":"binary tree"},{"term":"matrix"},{"term":"undirected graphs"},{"term":"Backtracking"},{"term":"Kth smallest element"},{"term":"LCA"},{"term":"Prune nodes in BST"},{"term":"Quick sort"},{"term":"binary search"},{"term":"bitwise"},{"term":"bitwise operation"},{"term":"duplicate numbers."},{"term":"google interview question"},{"term":"inorder successor"},{"term":"inorder traversal"},{"term":"interrupts"},{"term":"linked list based implementation"},{"term":"lowest common ancestor"},{"term":"min heap"},{"term":"minimum spanning tree"},{"term":"numbers"},{"term":"order statistics"},{"term":"paths in binary search tree"},{"term":"process"},{"term":"queues"},{"term":"semaphore"},{"term":"smallest missing number"},{"term":"sorting"},{"term":"0-1 knapsack"},{"term":"ADT"},{"term":"BFS"},{"term":"BST operations"},{"term":"C programming"},{"term":"C."},{"term":"CFS"},{"term":"Closest element"},{"term":"Completely Fair Scheduler"},{"term":"Count sort"},{"term":"DFs"},{"term":"Delete Binary Search Tree"},{"term":"Eight queens problems"},{"term":"Find duplicate"},{"term":"Find element in rotated array"},{"term":"K smallest elements"},{"term":"KMP"},{"term":"LRU cache"},{"term":"Level order printing of nodes"},{"term":"Life cycle Process"},{"term":"Longest increasing subsequence"},{"term":"Loop in singly linked list"},{"term":"MCDC"},{"term":"Mirror Binary Search Tree"},{"term":"N lines of file"},{"term":"O(1) scheduler"},{"term":"Priority scheduling"},{"term":"Quality related"},{"term":"Replace a node with sum of nodes which are greater than the node"},{"term":"Replace node with sum of children"},{"term":"Replace node with sum of its children"},{"term":"Scheduling"},{"term":"Statement coverage"},{"term":"Trie"},{"term":"Unit testing boundary value analysis"},{"term":"White box testing"},{"term":"XOR"},{"term":"addition of linked list"},{"term":"adjacency list based representation."},{"term":"adjacency matrix representation"},{"term":"algorithms."},{"term":"application of trie."},{"term":"arrangement"},{"term":"array based implementation"},{"term":"array based implementation of queues"},{"term":"asymptotic notation"},{"term":"balance partition"},{"term":"binary search."},{"term":"bottom halves"},{"term":"breadth First traversal"},{"term":"break string into dictionary words"},{"term":"build tree"},{"term":"characters"},{"term":"cheat sheet for complexity analysis"},{"term":"check if tree is binary search tree"},{"term":"code inspection"},{"term":"code walkthrough bugs in code inspection"},{"term":"coin change problem"},{"term":"complexity analysis"},{"term":"condition coverage"},{"term":"conition\/decision coverage"},{"term":"connect nodes at same level"},{"term":"connected components in graphs"},{"term":"conversion"},{"term":"convert BST to DLL"},{"term":"convert binary search tree to DLL"},{"term":"convert binary search tree to doubly linked list."},{"term":"count number of trees with n nodes"},{"term":"count number of words"},{"term":"count sort."},{"term":"covert string to equivalent number"},{"term":"decimal to binary number conversion"},{"term":"deletion of a node"},{"term":"depth first search"},{"term":"depth first traversal"},{"term":"detect cycle in undirected graph"},{"term":"difference"},{"term":"difference between exceptions and interrupts"},{"term":"difference between process and threads"},{"term":"disjoint sets"},{"term":"doubly linked list"},{"term":"duplicate"},{"term":"edit distance"},{"term":"encode a string"},{"term":"event schedule"},{"term":"excel column"},{"term":"exceptions"},{"term":"find K elements in window"},{"term":"find Kth node"},{"term":"find missing numbers"},{"term":"find words in maze"},{"term":"first instance"},{"term":"first instance of 0"},{"term":"first instance of 1"},{"term":"graph traversals."},{"term":"greedy algorithm"},{"term":"heap sort"},{"term":"heapify"},{"term":"if tree is bst"},{"term":"implement queue using stack"},{"term":"implementation"},{"term":"infix to postfix"},{"term":"inorder predecissor"},{"term":"insert in trie"},{"term":"interleaved strings"},{"term":"interrupt handling"},{"term":"kadanes"},{"term":"kernel"},{"term":"kernel API"},{"term":"knapsack problem"},{"term":"kruskal algorithm"},{"term":"last K elements of BST"},{"term":"least recently used cache"},{"term":"linked list merge"},{"term":"longest"},{"term":"longest arithmetic progression"},{"term":"longest common subsequence"},{"term":"matrix chain multiplication"},{"term":"max"},{"term":"max heaps."},{"term":"max operation on stack"},{"term":"max-heap"},{"term":"maze problem"},{"term":"merge"},{"term":"merge  overlapping intervals"},{"term":"merge K arrays"},{"term":"merge point of two linked lists"},{"term":"merge sort"},{"term":"min"},{"term":"min heaps"},{"term":"missing and repeating number"},{"term":"missing elements"},{"term":"missing numbers"},{"term":"move zeroes to end."},{"term":"mutex"},{"term":"mutex Vs semaphore"},{"term":"mutex."},{"term":"next greater element"},{"term":"next smallest element with same bits set"},{"term":"next smallest number with same digits"},{"term":"non-preemptive scheduling"},{"term":"number of bits set"},{"term":"number of instances"},{"term":"orphan process"},{"term":"palindrome"},{"term":"palindrome string"},{"term":"parenthesis matching"},{"term":"peak in array"},{"term":"permutations and combinations"},{"term":"pivot"},{"term":"possible paths in maze"},{"term":"postorder traversal"},{"term":"predecessor"},{"term":"preemptive"},{"term":"preorder traversal"},{"term":"prime factors"},{"term":"prims algorithm"},{"term":"priority queues"},{"term":"process internal representation"},{"term":"process states"},{"term":"processes"},{"term":"programing"},{"term":"ransom note"},{"term":"recursion."},{"term":"recursively reverse a list"},{"term":"remove characters present in other string"},{"term":"remove duplicates"},{"term":"repeating number"},{"term":"replace row and column with 1 in matrix."},{"term":"replace with next greater element"},{"term":"reverse K nodes"},{"term":"reverse a linked list"},{"term":"reverse a string"},{"term":"reverse words in a string"},{"term":"right most bit"},{"term":"right view of tree"},{"term":"rotate an array"},{"term":"rotated array"},{"term":"rotation by 90 degree"},{"term":"schedule"},{"term":"search"},{"term":"search an element in row and column sorted matrix"},{"term":"search element in matrix"},{"term":"set"},{"term":"sign of a number"},{"term":"signal handlers."},{"term":"signals"},{"term":"sliding window"},{"term":"sorted linked list"},{"term":"spinlock"},{"term":"spinlocks"},{"term":"spiral traversal of matrix"},{"term":"stock span problem"},{"term":"string copy"},{"term":"subset sum problem"},{"term":"substring"},{"term":"sum"},{"term":"sum of path equal to given number"},{"term":"t9 dictionary"},{"term":"telephone numbers to words"},{"term":"threads"},{"term":"tokens"},{"term":"tower of hanoi"},{"term":"traps"},{"term":"traversing linked lists"},{"term":"tree traversal with stack"},{"term":"tree traversal without recursion"},{"term":"tries"},{"term":"ugly number"},{"term":"unique rows of boolean matrix"},{"term":"zero sum subarray"},{"term":"zigzag traversal"},{"term":"zombie process"}],"title":{"type":"text","$t":"Algorithms and Me"},"subtitle":{"type":"html","$t":"Its not mine alone... If you have any interesting topic or question with or without solution, please mail me @ jitsceait@gmail.com"},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/-\/arrays?alt=json-in-script\u0026max-results=5"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/search\/label\/arrays"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/-\/arrays\/-\/arrays?alt=json-in-script\u0026start-index=6\u0026max-results=5"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"14"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"5"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-1586392582275398048"},"published":{"$t":"2014-05-27T18:56:00.000+05:30"},"updated":{"$t":"2014-05-27T18:57:30.571+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"matrix"},{"scheme":"http://www.blogger.com/atom/ns#","term":"unique rows of boolean matrix"}],"title":{"type":"text","$t":"Print unique rows in a boolean matrix"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003EGiven a matrix of 0 and 1, print all unique rows of it.\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFor example\u003Cbr \/\u003EMatrix \u0026nbsp;= \u0026nbsp;0 1 0 0 1\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;1 0 1 1 1\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;0 1 0 0 1\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;1 0 1 0 0\u003Cbr \/\u003EOutput should be\u003Cbr \/\u003E\u0026nbsp;0 1 0 0 1\u003Cbr \/\u003E\u0026nbsp;1 0 1 1 1\u003Cbr \/\u003E\u0026nbsp;1 0 1 0 0\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFirst solution which has complexity of O(N^2 x M) where is N is number of rows and M is number of columns is as follows.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFor each row in matrix, check all rows if it matches with anyone of them. If yes, skip printing, else print the row.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EOther way which is better than above approach is to convert each row in equivalent decimal and then check for duplicates. Again it has complexity of O(N^2 ) where N is number of rows and M as number of columns.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ECan we do better than this? There is standard technique to check if a particular pattern is already seen or not. That's using tries. Each pattern is added to trie, when we try to add a duplicate pattern, we will end up at the leaf node which is already marked as leaf due to earlier pattern.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EWith given info, we can say that we will insert each row pattern in trie. We will modify insert function of trie to return us whether the row is added newly or it was already present in trie. As explained above it can ascertained by the fact that if last node is marked as leaf node already, then it is duplicate row as we must have traveled same nodes above. If the last node is not leaf node already, then there is at least one digit which is different and hence row becomes unique. Mark last node of this pattern as leaf node, so that same patterns will be detected as duplicates.\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAlgorithm\u003C\/span\u003E\u003C\/h2\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli style=\"text-align: justify;\"\u003EAdd row in trie.\u003C\/li\u003E\u003Cli style=\"text-align: justify;\"\u003EIf the last node while entering the pattern is leaf node, return false. It's not unique row.\u003C\/li\u003E\u003Cli style=\"text-align: justify;\"\u003EIf last node is not leaf node, mark it as leaf node and return true.\u003C\/li\u003E\u003Cli style=\"text-align: justify;\"\u003EIf insert operation return true, print the row.\u003C\/li\u003E\u003Cli style=\"text-align: justify;\"\u003EElse, skip printing row.\u003C\/li\u003E\u003C\/ol\u003E \u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/ec01df1954af17e18a89.js\"\u003E\u003C\/script\u003E \u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003EComplexity of trie based solution is O(N x M).\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/1586392582275398048\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/problem-statement-given-matrix-of-0-and.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/1586392582275398048"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/1586392582275398048"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/problem-statement-given-matrix-of-0-and.html","title":"Print unique rows in a boolean matrix"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-4069971161414345180"},"published":{"$t":"2014-05-27T05:20:00.000+05:30"},"updated":{"$t":"2014-05-27T17:34:06.741+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"merge  overlapping intervals"}],"title":{"type":"text","$t":"Arrays : Merge overlapping intervals."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EGiven N intervals S = {e1,e2,.....en} each event has start and end time. Merge all overlapping intervals.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EEvents i and j overlap when start time of jth event is less than end time of ith event or vice-a-versa\u003Cbr \/\u003EFor example,\u0026nbsp;\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E[(\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E1\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E,\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E3\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E),\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E(\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E2\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E,\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E4\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E),\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E(\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E5\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E,\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E8\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E)]\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E\u0026nbsp;\u003Cspan style=\"font-family: inherit;\"\u003Eshould be transformed into\u003C\/span\u003E\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E\u0026nbsp;\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E[(\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E1\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E,\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E4\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E),\u003C\/span\u003E\u003Cspan class=\"pln\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E \u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E(\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E5\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E,\u003C\/span\u003E\u003Cspan class=\"lit\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; color: maroon; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E8\u003C\/span\u003E\u003Cspan class=\"pun\" style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: 0px; line-height: 17.804800033569336px; margin: 0px; padding: 0px; text-align: left; vertical-align: baseline; white-space: inherit;\"\u003E)]\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EThis problem is quite simple but through this problem we can understand concept of stacks and array.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ELet's see brute force solution. We take ith event and compare start time of every jth event with end time of ith, if start time of jth event is less than end time of ith event and end time of jth event is greater than ith event then update the end time of ith event.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EThis solution has complexity of O(N^2).Can we do better?\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EHow about sorting all events based on start time. Now if start time of ith event is greater than i-1 th event's end time, than it will be sure that start time of i+1th event will be greater than i-1th event. hence we will need to compare current event with just previous event and update the end time of previous event in case of overlap.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EWe can see that as we need the last visited event every time we visit new event, stack will be the best data structure to be used. \u0026nbsp;Perform following steps:\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003C\/div\u003E\u003Col\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EConsider event e.\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EIf stack is empty, push e to stack.\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EIf stack is not empty, then pop the event at top of stack call it e1.\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003ECompare start time of e with end time of event e1.\u0026nbsp;\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EIf start time of e is less than end time of e1, and end time of e is greater than end time of e1, update end time of e1\u0026nbsp;\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EPush e1 back to stack.\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EIf condition 5 is not true, push e to stack.\u0026nbsp;\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EContinue till all events are considered.\u003C\/span\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/0dfef4ea1d7c857cefd4.js\"\u003E\u003C\/script\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace;\"\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/div\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EComplexity of above code will be O(N log N) due to sorting with O(N) extra space.\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/4069971161414345180\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/arrays-merge-overlapping-intervals.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4069971161414345180"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4069971161414345180"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/arrays-merge-overlapping-intervals.html","title":"Arrays : Merge overlapping intervals."}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-4911195804227238904"},"published":{"$t":"2014-05-19T22:28:00.001+05:30"},"updated":{"$t":"2014-05-23T04:46:23.050+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"kadanes"}],"title":{"type":"text","$t":"Dynamic programming : Contiguous sub array with largest sum"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cb\u003EGiven an array of integers, find a sub array in it with largest sum. This problem is solved using Kadane's algorithm.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EFor example, for array\u0026nbsp;\u003Cspan style=\"background-color: white; line-height: 16.799999237060547px; text-align: left; white-space: pre;\"\u003E{-1, 3, -5, 4, 6, -1, 2, -7, 13, -3} maximum sum sub array will be {4,6,-1,2,-7,13} with sum = 17\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u0026nbsp;\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EAt every number in array, we need to take decision on two possibilities:\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E1. Number is included in already existing sub array and it increases the sum.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E2. Number is not included as it makes the sum negative and adding this will make all subsequent addition less than what we already have.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003ETo calculate sum till index i we can use sum we have already calculated till i-1 index.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf adding element at i makes the sum negative, we would drop the element, as having this element in the sub array will only decrease the already existing sum as well as sum all the elements subsequent of this element. Hence we would start afresh from i+1 element.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EEven if the sum is greater than zero, we need to check if it greater than the sum till i-1 index. If it is then \u003Cb\u003Eith\u003C\/b\u003E element is added in the sub array and rightmost index of sub array becomes i.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf \u0026nbsp;sum is less than max sum we have seen til i-1 index then we don't change the rightmost index of sub array.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf addition of \u003Cb\u003Eith\u003C\/b\u003E element make sum to be negative, we make current sum as zero and start all over again with i+1 index.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003EAbove algorithm does not work with all numbers being negative. What we can do is that scan all elements of array prior to application of this algorithm and find out if there is at least one non negative number. Also during this phase keep track of the largest number we have encountered. If all elements are negative, just return largest number.\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/c3bf0711bbb92c0216ba.js\"\u003E\u003C\/script\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EComplexity of above code is O(N) in time and O(1) in space.\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/4911195804227238904\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-contiguous-sub.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4911195804227238904"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4911195804227238904"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-contiguous-sub.html","title":"Dynamic programming : Contiguous sub array with largest sum"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-7512228717344733649"},"published":{"$t":"2014-04-13T17:12:00.001+05:30"},"updated":{"$t":"2014-05-25T16:57:37.005+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms."},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"zero sum subarray"}],"title":{"type":"text","$t":"Find a subarray with zero sum"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E\u003Cb\u003EGiven an array of integers, find a sub array which add up to zero.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EBrute force method will be to find all sub arrays of array and then add them individually to see if anyone of them adds up to zero.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESub arrays will be of size 1 to size N and there will be N * (N -1)\/2 sub arrays.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESub array means continuous elements of given array.\u0026nbsp;\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"color: #073763; font-family: inherit;\"\u003E\u003Cb\u003EBasic idea here is that, if we have sum of two different length sub arrays starting at index 0, then the sub array with length equal to difference of these two sub arrays adds up to zero.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESo, create a table T[] of size N where T[i] represents sum of all elements till i index.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EOnce done for all elements of array, check if there are i and j such that T[i] == T[j] and i != j.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf yes then we have a sub array of length j-1 +1 length which adds up to zero.\u0026nbsp;\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESimple concept and implementation is simpler.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/3439f0a91f0028a5b1fa.js\"\u003E\u003C\/script\u003E \u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EComplexity of code is O(N^2) with extra O(N) space.\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/7512228717344733649\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/find-subarray-with-zero-sum.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/7512228717344733649"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/7512228717344733649"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/find-subarray-with-zero-sum.html","title":"Find a subarray with zero sum"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-4449082978193430979"},"published":{"$t":"2014-04-12T12:52:00.000+05:30"},"updated":{"$t":"2014-05-19T01:35:16.662+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"balance partition"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"}],"title":{"type":"text","$t":"Balanced partition problem"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cb style=\"color: #073763; text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EGiven an array of integers, divide it into two sub sets so that difference between two sub sets is minimum.\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EFor example, in following array, difference between two subsets will be 1.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003Eint c[] = {1,7,4,11}; {1,11} and {7,4}\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EBrute force method is to list all the subsets of given array and select two among them which have their difference as minimum. This has exponential complexity.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EBefore going to the generic solution to this problem. Let me tweak this problem a bit. What if I need to find out if there are two subsets of given integers in array such that difference between sum of these two is zero. Essentially this is a special case of above problem.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EHow should we go about it? If difference between two sets is zero that means sum of both sets should be exactly equal to half of sum of all elements in array.Why?\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESo problem reduces to smaller problem that is to find if there is subset of integers which add up to half the sum of all elements in array? This is subset sum problem which we have already solved here :\u003C\/span\u003E\u003C\/div\u003E\u003Ch3 class=\"post-title entry-title\" itemprop=\"name\" style=\"background-color: #fefdfa; color: #d52a33; margin: 0px; position: relative; text-align: justify;\"\u003E\u003Ca href=\"http:\/\/algorithmsandme.blogspot.in\/2014\/03\/there-would-be-no-interview-worth-its.html\"\u003E\u003Cspan style=\"font-family: inherit; font-size: small;\"\u003ESubset sum problem\u003C\/span\u003E\u003C\/a\u003E\u003C\/h3\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ENow how can we use above information?\u0026nbsp;\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIn table generated above, table[i][j] gives true if there is subset of integers from \u003Cb\u003E\u003Ci style=\"background-color: #cfe2f3;\"\u003E0 to jth index which add up to sum i.\u003C\/i\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ENow we have this extra information which says what are the possible sums which can be generated using subsets of integers of given array.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ENow sum of all numbers in integers is given by\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: justify;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-A8RFc6SuOjw\/U0jYIsN38MI\/AAAAAAAAA44\/vz1Qf0jBz00\/s1600\/summation.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-A8RFc6SuOjw\/U0jYIsN38MI\/AAAAAAAAA44\/vz1Qf0jBz00\/s1600\/summation.png\" height=\"113\" width=\"320\" \/\u003E\u003C\/span\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ELet's half it and find a subset which has sum as close as possible to this half. That will give us other subset which is \u0026nbsp;least greater than half of sum of all elements of array and that will be minimum difference possible between two subsets. :) Our expression would be\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: justify;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-TFeoTQ0OIuM\/U0jZbwaKrKI\/AAAAAAAAA5E\/CDC_QvneZJU\/s1600\/summation-2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-TFeoTQ0OIuM\/U0jZbwaKrKI\/AAAAAAAAA5E\/CDC_QvneZJU\/s1600\/summation-2.png\" height=\"93\" width=\"400\" \/\u003E\u003C\/span\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Ch2\u003E\u003Cspan style=\"font-family: 'Courier New', Courier, monospace;\"\u003E\u003Cspan style=\"font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/48c8ba31c6b4d7db919b.js\"\u003E\u003C\/script\u003E\u003C\/div\u003E  \u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EComplexity of above code will be O(N^2 *K) with space complexity of O(N^2), where K will be the max value array can have.\u003C\/span\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/4449082978193430979\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/balanced-partition-problem.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4449082978193430979"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4449082978193430979"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/balanced-partition-problem.html","title":"Balanced partition problem"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-A8RFc6SuOjw\/U0jYIsN38MI\/AAAAAAAAA44\/vz1Qf0jBz00\/s72-c\/summation.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});