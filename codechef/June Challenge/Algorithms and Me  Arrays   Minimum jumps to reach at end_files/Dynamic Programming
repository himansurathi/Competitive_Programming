// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170"},"updated":{"$t":"2014-06-15T11:11:58.181+05:30"},"category":[{"term":"algorithms"},{"term":"binary search tree"},{"term":"Dynamic Programming"},{"term":"arrays"},{"term":"interview question"},{"term":"Operating Systems"},{"term":"stacks"},{"term":"strings"},{"term":"graphs"},{"term":"Heaps"},{"term":"recursion"},{"term":"C"},{"term":"Microsoft interview questions"},{"term":"divide and conquer"},{"term":"linked list"},{"term":"programming"},{"term":"Queue"},{"term":"binary tree"},{"term":"matrix"},{"term":"undirected graphs"},{"term":"Backtracking"},{"term":"Kth smallest element"},{"term":"LCA"},{"term":"Prune nodes in BST"},{"term":"Quick sort"},{"term":"binary search"},{"term":"bitwise"},{"term":"bitwise operation"},{"term":"duplicate numbers."},{"term":"google interview question"},{"term":"inorder successor"},{"term":"inorder traversal"},{"term":"interrupts"},{"term":"linked list based implementation"},{"term":"lowest common ancestor"},{"term":"min heap"},{"term":"minimum spanning tree"},{"term":"numbers"},{"term":"order statistics"},{"term":"paths in binary search tree"},{"term":"process"},{"term":"queues"},{"term":"semaphore"},{"term":"smallest missing number"},{"term":"sorting"},{"term":"0-1 knapsack"},{"term":"ADT"},{"term":"BFS"},{"term":"BST operations"},{"term":"C programming"},{"term":"C."},{"term":"CFS"},{"term":"Closest element"},{"term":"Completely Fair Scheduler"},{"term":"Count sort"},{"term":"DFs"},{"term":"Delete Binary Search Tree"},{"term":"Eight queens problems"},{"term":"Find duplicate"},{"term":"Find element in rotated array"},{"term":"K smallest elements"},{"term":"KMP"},{"term":"LRU cache"},{"term":"Level order printing of nodes"},{"term":"Life cycle Process"},{"term":"Longest increasing subsequence"},{"term":"Loop in singly linked list"},{"term":"MCDC"},{"term":"Mirror Binary Search Tree"},{"term":"N lines of file"},{"term":"O(1) scheduler"},{"term":"Priority scheduling"},{"term":"Quality related"},{"term":"Replace a node with sum of nodes which are greater than the node"},{"term":"Replace node with sum of children"},{"term":"Replace node with sum of its children"},{"term":"Scheduling"},{"term":"Statement coverage"},{"term":"Trie"},{"term":"Unit testing boundary value analysis"},{"term":"White box testing"},{"term":"XOR"},{"term":"addition of linked list"},{"term":"adjacency list based representation."},{"term":"adjacency matrix representation"},{"term":"algorithms."},{"term":"application of trie."},{"term":"arrangement"},{"term":"array based implementation"},{"term":"array based implementation of queues"},{"term":"asymptotic notation"},{"term":"balance partition"},{"term":"binary search."},{"term":"bottom halves"},{"term":"breadth First traversal"},{"term":"break string into dictionary words"},{"term":"build tree"},{"term":"characters"},{"term":"cheat sheet for complexity analysis"},{"term":"check if tree is binary search tree"},{"term":"code inspection"},{"term":"code walkthrough bugs in code inspection"},{"term":"coin change problem"},{"term":"complexity analysis"},{"term":"condition coverage"},{"term":"conition\/decision coverage"},{"term":"connect nodes at same level"},{"term":"connected components in graphs"},{"term":"conversion"},{"term":"convert BST to DLL"},{"term":"convert binary search tree to DLL"},{"term":"convert binary search tree to doubly linked list."},{"term":"count number of trees with n nodes"},{"term":"count number of words"},{"term":"count sort."},{"term":"covert string to equivalent number"},{"term":"decimal to binary number conversion"},{"term":"deletion of a node"},{"term":"depth first search"},{"term":"depth first traversal"},{"term":"detect cycle in undirected graph"},{"term":"difference"},{"term":"difference between exceptions and interrupts"},{"term":"difference between process and threads"},{"term":"disjoint sets"},{"term":"doubly linked list"},{"term":"duplicate"},{"term":"edit distance"},{"term":"encode a string"},{"term":"event schedule"},{"term":"excel column"},{"term":"exceptions"},{"term":"find K elements in window"},{"term":"find Kth node"},{"term":"find missing numbers"},{"term":"find words in maze"},{"term":"first instance"},{"term":"first instance of 0"},{"term":"first instance of 1"},{"term":"graph traversals."},{"term":"greedy algorithm"},{"term":"heap sort"},{"term":"heapify"},{"term":"if tree is bst"},{"term":"implement queue using stack"},{"term":"implementation"},{"term":"infix to postfix"},{"term":"inorder predecissor"},{"term":"insert in trie"},{"term":"interleaved strings"},{"term":"interrupt handling"},{"term":"kadanes"},{"term":"kernel"},{"term":"kernel API"},{"term":"knapsack problem"},{"term":"kruskal algorithm"},{"term":"last K elements of BST"},{"term":"least recently used cache"},{"term":"linked list merge"},{"term":"longest"},{"term":"longest arithmetic progression"},{"term":"longest common subsequence"},{"term":"matrix chain multiplication"},{"term":"max"},{"term":"max heaps."},{"term":"max operation on stack"},{"term":"max-heap"},{"term":"maze problem"},{"term":"merge"},{"term":"merge  overlapping intervals"},{"term":"merge K arrays"},{"term":"merge point of two linked lists"},{"term":"merge sort"},{"term":"min"},{"term":"min heaps"},{"term":"missing and repeating number"},{"term":"missing elements"},{"term":"missing numbers"},{"term":"move zeroes to end."},{"term":"mutex"},{"term":"mutex Vs semaphore"},{"term":"mutex."},{"term":"next greater element"},{"term":"next smallest element with same bits set"},{"term":"next smallest number with same digits"},{"term":"non-preemptive scheduling"},{"term":"number of bits set"},{"term":"number of instances"},{"term":"orphan process"},{"term":"palindrome"},{"term":"palindrome string"},{"term":"parenthesis matching"},{"term":"peak in array"},{"term":"permutations and combinations"},{"term":"pivot"},{"term":"possible paths in maze"},{"term":"postorder traversal"},{"term":"predecessor"},{"term":"preemptive"},{"term":"preorder traversal"},{"term":"prime factors"},{"term":"prims algorithm"},{"term":"priority queues"},{"term":"process internal representation"},{"term":"process states"},{"term":"processes"},{"term":"programing"},{"term":"ransom note"},{"term":"recursion."},{"term":"recursively reverse a list"},{"term":"remove characters present in other string"},{"term":"remove duplicates"},{"term":"repeating number"},{"term":"replace row and column with 1 in matrix."},{"term":"replace with next greater element"},{"term":"reverse K nodes"},{"term":"reverse a linked list"},{"term":"reverse a string"},{"term":"reverse words in a string"},{"term":"right most bit"},{"term":"right view of tree"},{"term":"rotate an array"},{"term":"rotated array"},{"term":"rotation by 90 degree"},{"term":"schedule"},{"term":"search"},{"term":"search an element in row and column sorted matrix"},{"term":"search element in matrix"},{"term":"set"},{"term":"sign of a number"},{"term":"signal handlers."},{"term":"signals"},{"term":"sliding window"},{"term":"sorted linked list"},{"term":"spinlock"},{"term":"spinlocks"},{"term":"spiral traversal of matrix"},{"term":"stock span problem"},{"term":"string copy"},{"term":"subset sum problem"},{"term":"substring"},{"term":"sum"},{"term":"sum of path equal to given number"},{"term":"t9 dictionary"},{"term":"telephone numbers to words"},{"term":"threads"},{"term":"tokens"},{"term":"tower of hanoi"},{"term":"traps"},{"term":"traversing linked lists"},{"term":"tree traversal with stack"},{"term":"tree traversal without recursion"},{"term":"tries"},{"term":"ugly number"},{"term":"unique rows of boolean matrix"},{"term":"zero sum subarray"},{"term":"zigzag traversal"},{"term":"zombie process"}],"title":{"type":"text","$t":"Algorithms and Me"},"subtitle":{"type":"html","$t":"Its not mine alone... If you have any interesting topic or question with or without solution, please mail me @ jitsceait@gmail.com"},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/-\/Dynamic+Programming?alt=json-in-script\u0026max-results=5"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/search\/label\/Dynamic%20Programming"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/-\/Dynamic+Programming\/-\/Dynamic+Programming?alt=json-in-script\u0026start-index=6\u0026max-results=5"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"15"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"5"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-1693538179405982893"},"published":{"$t":"2014-05-23T22:08:00.000+05:30"},"updated":{"$t":"2014-05-24T18:24:25.044+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"interleaved strings"},{"scheme":"http://www.blogger.com/atom/ns#","term":"strings"}],"title":{"type":"text","$t":"Strings : Check if string in interleaved of two strings."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: justify;\"\u003EGiven string A,B and C, find if string C is interleaved of A and B.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EC is said to be interleaved if it contains all characters of A and B and order of characters in respective string is maintained. For example string C in figure is interleaved string of A and B\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/--kWANrNuCF8\/U39ua0o8iGI\/AAAAAAAABB8\/a3s_Qvh3p80\/s1600\/string.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/--kWANrNuCF8\/U39ua0o8iGI\/AAAAAAAABB8\/a3s_Qvh3p80\/s1600\/string.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-size: small;\"\u003EInterleaved strings\u003C\/span\u003E\u003C\/b\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Ch2\u003E\u003Cspan style=\"font-family: 'Courier New', Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003ESimple algorithm goes like :\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ELet's say we start with first character of C,A and B. Consider length of C as length of A + length of B. If it is not true return false (why?).\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ENow check first character of C and A. If they match, move to second character of C and A. Keep B at first character.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf above condition is not true, check if first character of C and B match, then move to second character C and B. A remains at first character.\u003Cbr \/\u003EOnce done, again do above steps with new first characters of strings, while character in C matches character in A or B.\u003Cbr \/\u003EIf both above conditions are false, return false.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ENow conditions problem reduces to smaller problem with C with length N-1, one of A or B with M-1.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFrom above description, we can figure out that recursion can be used to solve this problem.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EisInterleaved(A,B,C) \u0026nbsp;= isInterleaved(A+1, B, C+1) \/\/ If character of C matches with character of A\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;|| isInterleaved(A, B+1,C+1) \/\/ If character of C matches with character of B\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EWhat shall be the base case?\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf we reach at the end of C, we have considered all characters, we can return true if all characters in other two strings are considered. If not returned false.\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/5693afd4b969c86bad45.js\"\u003E\u003C\/script\u003E \u003Cspan style=\"font-family: inherit; font-size: small;\"\u003E\u003Cu\u003EIterative implementation\u003C\/u\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/7266448721fadbf8360c.js\"\u003E\u003C\/script\u003E \u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIterative implementation will not work with input where there are common characters in string A and B, for example A = XXY and B = XXZ and if C = XXZXXY will return false\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: justify;\"\u003EComplexity of above code will be linear O(N) N being length of string C, where as complexity of recursive solution will b O(2^N) but it does not fail in above mentioned case.\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch2\u003E\u003Cspan style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EDynamic programming approach\u003C\/span\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: justify;\"\u003EIf we look closely, we can see that there are many sub problems which are being calculated again and again. Let's look at recursion tree for input A = XXY and B = XXZ and C = XXZXXY\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-lmgK6G0aWdQ\/U391ARNJItI\/AAAAAAAABCI\/7t6_axj3Gcs\/s1600\/string+(1).png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-lmgK6G0aWdQ\/U391ARNJItI\/AAAAAAAABCI\/7t6_axj3Gcs\/s1600\/string+(1).png\" height=\"203\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-size: small;\"\u003ERecursion tree for sub problems\u003C\/span\u003E\u003C\/b\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003EWe get the idea that we need to store result of smaller sun problems, so that we do not calculate it again and again.\u003Cbr \/\u003E\u003Cbr \/\u003EWe create a two dimensional table. Table(i,j) = true only if C[i+j-1] is interleaved string if A[i] and B[j].\u003Cbr \/\u003EEmpty string is interleaved of two other strings so,\u003Cbr \/\u003E\u003Cb\u003ETable[0][0] = true\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003EIf one of the strings was empty:\u003Cbr \/\u003E\u003Cb\u003ETable(i,0) = A[i] == C[i] \u0026amp;\u0026amp; Table(i-1, 0)\u003C\/b\u003E that is to say if till i-1 characters C was interleaved of A, then for ith character it will be true if ith character matches ith character of A. Note that B is null here\u003Cbr \/\u003EAgain if string A is empty, then Table(0,j) = Table(0, j-1) . With same argument above.\u003Cbr \/\u003E\u003Cbr \/\u003EWith these base cases, we can fill table bottom up as follows\u003Cbr \/\u003E\u003Cb\u003ETable(i,j) = Table(i-1,j) \u0026nbsp;if (A[i] == C[i+j]) \u0026amp;\u0026amp; (B[j] != C[i+j])\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003ETable(i,j) = Table(i,j-1) (B[i] == C[i+j])\u0026amp;\u0026amp; (A[j] != C[i+j])\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003ETable(i,j) = Table(i-1,j) || Table(i, j-1) if (A[i] == C[i+j]) \u0026amp;\u0026amp; (B[j] == C[i+j])\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch2\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/af5f905d05e8c95de7c3.js\"\u003E\u003C\/script\u003E Complexity of above code will be O(N^2).\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/1693538179405982893\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/strings-check-if-string-in-interleaved.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/1693538179405982893"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/1693538179405982893"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/strings-check-if-string-in-interleaved.html","title":"Strings : Check if string in interleaved of two strings."}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/--kWANrNuCF8\/U39ua0o8iGI\/AAAAAAAABB8\/a3s_Qvh3p80\/s72-c\/string.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-4911195804227238904"},"published":{"$t":"2014-05-19T22:28:00.001+05:30"},"updated":{"$t":"2014-05-23T04:46:23.050+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"arrays"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"kadanes"}],"title":{"type":"text","$t":"Dynamic programming : Contiguous sub array with largest sum"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cb\u003EGiven an array of integers, find a sub array in it with largest sum. This problem is solved using Kadane's algorithm.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EFor example, for array\u0026nbsp;\u003Cspan style=\"background-color: white; line-height: 16.799999237060547px; text-align: left; white-space: pre;\"\u003E{-1, 3, -5, 4, 6, -1, 2, -7, 13, -3} maximum sum sub array will be {4,6,-1,2,-7,13} with sum = 17\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u0026nbsp;\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EAt every number in array, we need to take decision on two possibilities:\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E1. Number is included in already existing sub array and it increases the sum.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E2. Number is not included as it makes the sum negative and adding this will make all subsequent addition less than what we already have.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003ETo calculate sum till index i we can use sum we have already calculated till i-1 index.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf adding element at i makes the sum negative, we would drop the element, as having this element in the sub array will only decrease the already existing sum as well as sum all the elements subsequent of this element. Hence we would start afresh from i+1 element.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EEven if the sum is greater than zero, we need to check if it greater than the sum till i-1 index. If it is then \u003Cb\u003Eith\u003C\/b\u003E element is added in the sub array and rightmost index of sub array becomes i.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf \u0026nbsp;sum is less than max sum we have seen til i-1 index then we don't change the rightmost index of sub array.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf addition of \u003Cb\u003Eith\u003C\/b\u003E element make sum to be negative, we make current sum as zero and start all over again with i+1 index.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003EAbove algorithm does not work with all numbers being negative. What we can do is that scan all elements of array prior to application of this algorithm and find out if there is at least one non negative number. Also during this phase keep track of the largest number we have encountered. If all elements are negative, just return largest number.\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/c3bf0711bbb92c0216ba.js\"\u003E\u003C\/script\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EComplexity of above code is O(N) in time and O(1) in space.\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/4911195804227238904\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-contiguous-sub.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4911195804227238904"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/4911195804227238904"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-contiguous-sub.html","title":"Dynamic programming : Contiguous sub array with largest sum"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-3285079218695044273"},"published":{"$t":"2014-05-15T05:17:00.000+05:30"},"updated":{"$t":"2014-05-15T05:37:37.302+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"edit distance"}],"title":{"type":"text","$t":"Dynamic programming : Edit distance of two strings"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: justify;\"\u003EEdit distance of two strings is minimum number of operations one need to perform on one string so that it transforms into another .Operation allowed are insertion of character, deletion of character and substitution of a character. For example,\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EString S1 \u0026nbsp;= EXPONENTIAL\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EString S2 = POLYNOMIAL\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: justify;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-mWqcVzMeYRg\/U3K3gW6uZlI\/AAAAAAAABAU\/FrT15725bY4\/s1600\/edit+distance+(1).png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-mWqcVzMeYRg\/U3K3gW6uZlI\/AAAAAAAABAU\/FrT15725bY4\/s1600\/edit+distance+(1).png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EGiven two string S1 and S2, find minimum edit distance between two.\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFrom above example we can see we have to find the best possible alignment of two strings. However there are so many alignments possible with two string, it will be very costly for consider each and every alignment and look for the best.\u003Cbr \/\u003E\u003Cbr \/\u003ECan we break the problem in smaller and easy to solve subproblems?\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EProblem at hand is to find minimum edit distance between X[1...n] and Y[1...m] strings. \u0026nbsp;Consider prefix of each string X[1...i] and Y[1...j], let's find edit distance for these prefixes and lets call it Edit(i,j). Finally we need to calculate Edit(n,m).\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf we align two string, we start aligning right most past first. So there three possibilities at to treat last most character.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-7PYUdM7_NA4\/U3P_EfKN7UI\/AAAAAAAABAk\/3DXmhyn4dsw\/s1600\/Arrangement.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-7PYUdM7_NA4\/U3P_EfKN7UI\/AAAAAAAABAk\/3DXmhyn4dsw\/s1600\/Arrangement.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-size: small;\"\u003EThree possibilities for each character\u003C\/span\u003E\u003C\/b\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: justify;\"\u003ELet's consider each case one by one:\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003ECase 1\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf last character of S1 does not match with last character of S2, let's say we delete the character from S1. Cost of this operation will be 1. Now we have i-1 characters in X and j characters in Y to consider which is nothing but Edit(i-1,j).\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003ECase 2:\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf last character of S1 does not match with last character of S2, let's say we add character from S1. Cost of this operation will be 1. Now we have i characters in X and j-1 characters in Y to consider which is nothing but Edit(i,j-1).\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003ECase 3:\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EHere, we do not delete or delete character. There two possibilities : Either the aligned characters match or they do not.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf they match then we just need to find edit distance for i-1 and j-1 length prefix. No cost will incur here.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIf they don't match, then we need to substitute one with other. Cost of which will be 1 and our problem reduces to i-1 and j-1 prefixes.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ESo finally we are able to define our problem into subproblems which can be solved recursively.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003EEdit(i,j) = min { 1+ Edit(i,j-1), 1 + Edit(i-1,j),\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; Edit(i-1, j-1) if X[i] == Y[j]\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d;\"\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 1+ Edit(i-1, j-1) if X[i] == Y[j] )\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cbr \/\u003EWhat will be the base case?\u003Cbr \/\u003EIf both strings are of length zero, cost will be 0.\u003Cbr \/\u003EIf one string is of length 0, then cost will be length of other string.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ERecursive implementation\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/e70a45cf584fb3e45902.js\"\u003E\u003C\/script\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EIt is evident that we are solving one sub problem again and again. To avoid that, we can use dynamic programming as two conditions : Problem should optimal sub problems and sub problems should be overlapping are being met here for applying dynamic programming.\u003Cbr \/\u003E\u003Cbr \/\u003ETo implement this formula with dynamic programming, we need a two dimensional table where\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003ETable(i,j) stores Edit(i,j) and every cell can be calculated with bottom up approach. At the end Table(n,m) gives the final result. Does not matter, if we fill table row wise or column wise, when we reach at cell (i,j), we will have all the required cells already filled in.\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-size: large;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace;\"\u003Ecode\u003C\/span\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/8e60c763ffe51e7c7eae.js\"\u003E\u003C\/script\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003E\u003Cdiv style=\"text-align: justify;\"\u003EComplexity Analysis\u003C\/div\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EComplexity of above code is O(N^2) with extra space complexity of O(N^2).\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/3285079218695044273\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-edit-distance-of.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/3285079218695044273"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/3285079218695044273"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-edit-distance-of.html","title":"Dynamic programming : Edit distance of two strings"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-mWqcVzMeYRg\/U3K3gW6uZlI\/AAAAAAAABAU\/FrT15725bY4\/s72-c\/edit+distance+(1).png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-6870457713526544968"},"published":{"$t":"2014-05-13T06:23:00.000+05:30"},"updated":{"$t":"2014-05-14T04:57:17.811+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"coin change problem"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"}],"title":{"type":"text","$t":"Dynamic programming : Making change with coins"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: justify;\"\u003EGiven a number S and coins of values V = {V1,V2,V3, V4}. Find number of ways change can be made for S using these coins.We have infinite supply of these coins.\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003EFor example,\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white; line-height: 19.200000762939453px;\"\u003ES\u0026nbsp;= 4,\u0026nbsp;V\u0026nbsp;= {1,2,3}\u003C\/span\u003E\u003Cspan style=\"background-color: white; line-height: 19.200000762939453px;\"\u003E, there are four solutions:\u0026nbsp;\u003C\/span\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white; line-height: 19.200000762939453px;\"\u003E{1,1,1,1},{1,1,2},{2,2},{1,3}\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white; line-height: 19.200000762939453px;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EMathematically, we have to find number of solutions for following expression:\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cb\u003ES = summation (k = 1 to m ) X(K) * V(K)\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EHere X(K) cannot be negative.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit; line-height: 19.200000762939453px;\"\u003EWe have solved similar problem in subset sum problem. Refer :\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"background-color: #fefdfa; color: #d52a33; font-family: inherit; text-align: left;\"\u003E\u003Ca href=\"http:\/\/algorithmsandme.blogspot.in\/2014\/03\/there-would-be-no-interview-worth-its.html\"\u003ESubset sum problem\u003C\/a\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EThere we have limitation that every element can be considered only once (there was no infinite supply)when while formulating the solution. So we were reducing the size of input every time we considered an element. However in our case we don't need to decrease the size of the input as we have infinite supply of coins. We decrease the count only when there is no possibility of it being included further in solution.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EOther difference is that subset problem was a decision problem where we need to say True or False for answer, here we need to give count.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003ERest all remains same.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003ESo, with each coin there are two possibilities associated :\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E1. Either the coin is included in solution.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E2. Or it is not included in solution.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EIf coin is included in solution, our problem reduces to find solution for N-V(m) using K coins. See we can again use the same coin in reduced problem.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003EIf coin is not included in solution, and since coins given are in sorted order, it will never be included into solution, so just decrease the coins set by 1 and keep the required sum as N.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan class=\"texhtml\" dir=\"ltr\" style=\"background-color: white;\"\u003E\u003Cspan style=\"background-color: transparent; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EIf we look at it, it is simple recursive formulation.\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cb\u003EC(N,m) = C(N,m-1) + C(N- V(m), m);\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EWhat will be base condition then?\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EIf with any number of coins we reach where change is required for 0, we have found one solution. i.e\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cb\u003EC(N,m) = 1 if N ==0\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EWhat if we have considered all coins and N is still greater than 0, in that case combination we have considered does not provide a solution. Hence, \u003Cb\u003EC(N,m) =0 if N\u0026gt;0 and m\u0026lt;0\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EWhat if sum required at a point is less than zero, that is we have included extra coins and that combination is not a solution. Hence\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cb\u003EC(N,m) = 0 if N\u0026lt;0\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003ELet's see the code\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace;\"\u003E\u003Cspan style=\"background-color: white; line-height: 19.200000762939453px;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-size: large;\"\u003ECode\u003C\/span\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/602dd444443c383866e1.js\"\u003E\u003C\/script\u003E \u003Cdiv\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"background-color: white; line-height: 19.200000762939453px;\"\u003EWe can see that we are calculating the same sub problem\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"background-color: white;\"\u003E\u003Cspan style=\"line-height: 19.200000762939453px;\"\u003Eagain and again, that we can avoid using simple\u0026nbsp;memorization.\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white;\"\u003E\u003Cspan style=\"font-family: inherit; line-height: 19.200000762939453px;\"\u003ELet's say Coins(i, j) represents the number of ways in which change for i can be made using j coins.\u003C\/span\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003ENow if the jth item is included, then numbers of ways will be\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003ECoins(i- v[j], j-1)\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EIf jth coin is not included, number of ways will be\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003ECoins (i, j-1).\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003EAdding both of them will give us\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: inherit; line-height: 19.200000762939453px;\"\u003ECoins(i,j) = Coins(i-v[j]) + Coins(i, j-1).\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"background-color: white; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"background-color: white; line-height: 19.200000762939453px;\"\u003ECode is simple.\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/bcf4e09189cdeccd7bd3.js\"\u003E\u003C\/script\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"background-color: white; font-family: 'Courier New', Courier, monospace; line-height: 19.200000762939453px;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Ch2\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003EComplexity of recursive code will be exponential while of that of dynamic programming approach will be O(N^2)\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/6870457713526544968\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-making-coins-change.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/6870457713526544968"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/6870457713526544968"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/05\/dynamic-programming-making-coins-change.html","title":"Dynamic programming : Making change with coins"}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-2585955070696911170.post-2798970492600261834"},"published":{"$t":"2014-04-17T17:30:00.001+05:30"},"updated":{"$t":"2014-05-11T09:52:04.575+05:30"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"algorithms"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Dynamic Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"longest arithmetic progression"}],"title":{"type":"text","$t":"Dynamic programming  :Longest Arithmetic Progression "},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EArithmetic progression is set of numbers in which difference between two consecutive numbers is constant. For example, 1,4,7,10,13 form a arithmetic progression.\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EProblem statement\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #20124d; font-family: inherit;\"\u003EGiven a set of integers in sorted order, find the length of longest arithmetic progression.\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cbr\/\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EAnalysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EThis problem can be easily solved using hash.We need to consider each possible pair of elements in array and add that pair to the hash table entry corresponding to that difference. There are n*(n-1)\/2 such pairs. So our complexity becomes O(N^2) with extra space for hash size of which is proportional to the maximum difference between any two elements.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ELet's simplify the problem first. What if we need to check if there are three numbers in set which form AP? Two numbers always form an AP Why?\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: inherit;\"\u003EA[i], A[j] and A[k] form an AP if 2* A[j] = A[i] + A[k] where k\u0026gt;j and i\u0026lt;j.\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESo we need to check of each j in array and if we find i and k satisfying above condition, we return true.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EHow can we apply this to find length of longest arithmetic progression?\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EAs I mentioned above, two numbers always from an arithmetic progression, any number from set will always from AP of length 2 with last element of set.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIf formulate a table where Table[i][j] is set to length of AP with \u0026nbsp;first and second element as A[i] and A[j]. When j = N, value is set to 2 as per above statement.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ENow we move up from N-1 to 0 and fill Table [i][j].\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EWe search for i \u0026lt; j and k\u0026gt;j such that A[i], A[j] and A[k] form an AP. Then,\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: inherit;\"\u003ETable[i][j] = Table[j][k] +1\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003ESince we are filling table bottom up and k\u0026gt;j Table[j][k] would have been already calculated.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003ECode\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cscript src=\"https:\/\/gist.github.com\/jitsceait\/414fc34d9f3f8a8b03cd.js\"\u003E\u003C\/script\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: justify;\"\u003E\u003Cspan style=\"font-family: Courier New, Courier, monospace; font-size: large;\"\u003EComplexity Analysis\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003EComplexity of above code is O(N^2) with O(N^2) extra space.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"text-align: justify;\"\u003E\u003Cb\u003EReference\u003C\/b\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit; text-align: justify;\"\u003Ehttp:\/\/www.cs.uiuc.edu\/~jeffe\/pubs\/pdf\/arith.pdf\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: 'Courier New', Courier, monospace; text-align: justify;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/algorithmsandme.blogspot.com\/feeds\/2798970492600261834\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/dynamic-programming-longest-arithmetic.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/2798970492600261834"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/2585955070696911170\/posts\/default\/2798970492600261834"},{"rel":"alternate","type":"text/html","href":"http:\/\/algorithmsandme.blogspot.com\/2014\/04\/dynamic-programming-longest-arithmetic.html","title":"Dynamic programming  :Longest Arithmetic Progression "}],"author":[{"name":{"$t":"Jitendra Sangar"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07885594236543253450"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"14","height":"32","src":"http:\/\/1.bp.blogspot.com\/_UinON8Bx_II\/SW9pX_EYgiI\/AAAAAAAAAEE\/kfa2A_iXtTE\/S220\/jjitu.jpg"}}],"thr$total":{"$t":"0"}}]}});